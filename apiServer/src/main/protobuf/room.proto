syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.github.CA21engineer.HouseHackathonUnityServer.grpc";
option java_outer_classname = "RoomService";

//import "google/protobuf/timestamp.proto";

package room;

message RoomResponse {
    oneof response {
        JoinRoomResponse joinRoomResponse = 1;
        ReadyResponse readyResponse = 2;
        SimpleGameResult result = 3;
        ErrorType error = 4;
    }
}

enum ErrorType {
    UNKNOWN_MESSAGE_TYPE = 0;
    LOST_CONNECTION_ERROR = 1; // 親or子の接続切れ
    ROOM_NOT_FOUND_ERROR = 2; // ルームが見つからない, Privateな部屋で合言葉間違いもこれ
}

message CreateRoomRequest {
    string AccountId = 1;
    string roomKey = 2; // Optional
    string AccountName = 3;
}

message JoinRoomRequest {
    string AccountId = 1;
    string roomKey = 2; // Option
    string AccountName = 3;
}
message JoinRoomResponse {
    string RoomId = 1;
    int32 vagrant = 2; // 空き人数
}

message ReadyResponse {
    string RoomId = 1;
    repeated Coordinate ghostRecord = 2;
    repeated Member Member = 3;
    Direction Direction = 4;
    string date = 5; // 準備完了時間UTC
}

message Member {
    string AccountName = 1;
    Direction Direction = 2;
}

enum Direction {
    UNKNOWN = 0;
    Up = 1;
    Down = 2;
    Left = 3;
    Right =4;
}

// require MetaData: string roomid, string accountid
message Coordinate {
    float x = 1;
    float y = 2;
    // dateはゲームスタートからの開始ミリ秒(1s = 1000ms)
    int64 date = 3; // ゲームスタートからの経過時間
    float z = 4;
}

// require MetaData: string roomid, string accountid
message Operation {
    Direction Direction = 1;
    float strength = 2; // 0 ~ 1
}

message ParentOperationRequest {
    string RoomId = 1;
    string AccountId = 2;
}

message SendResultRequest {
    string RoomId = 1;
    string AccountId = 2;
    repeated Coordinate ghostRecord = 3;
    bool isGameClear = 4; // ゲームクリアならtrue、ゲームオーバーならfalse
    int64 date = 5; // 終了時点でのゲームスタートからの経過時間
}

message SimpleGameResult {
    bool isGameClear = 1; // ゲームクリアならtrue、ゲームオーバーならfalse
    int64 date = 2; // 終了時点でのゲームスタートからの経過時間
}

message GetPublicRoomResponse {
    int32 vagrantRoom = 1;
}

message Empty {}

service RoomService {

    rpc CreateRoom(CreateRoomRequest) returns (stream RoomResponse) {};
    rpc JoinRoom(JoinRoomRequest) returns (stream RoomResponse) {};

    rpc CoordinateSharing(stream Coordinate) returns (stream Coordinate) {};

    rpc ChildOperation(stream Operation) returns (stream Empty) {};
    rpc ParentOperation(ParentOperationRequest) returns (stream Operation) {};

    rpc SendResult(SendResultRequest) returns (Empty) {};

    // まだ埋まっていない公開部屋数
    rpc GetPublicRoom(Empty) returns (GetPublicRoomResponse) {};
}


